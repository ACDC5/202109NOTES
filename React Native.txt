
React：

跨域问题:
1、新建一个chrome快捷方式，打开属性在目标中加入命令参数
2、--disable-web-security --user-data-dir=C:\Program Files (x86)\Google\Chrome\Application

关于 npx react-native link命令的解释:
https://reactnative.cn/docs/linking-libraries-ios

npm start --启动react项目

解构赋值:
	https://blog.csdn.net/HongZeng_CSDN/article/details/84724329
	解构赋值，可以同时对一组变量进行赋值

使用WebStorm对ReactNative代码进行逐行调试:
	来源:https://www.jianshu.com/p/3745e645526e?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation

	实际操作:
		1:进入WebStorm的Edit Configurations，弹出配置框
		2:点击左上角的 + 按钮，选择React Native项
		3:为当前配置取名;选择代码运行的平台(我的时android)
		4:将 Build and launch application 的打勾去掉(勾选后选择平台，低级debug图标，webstorm将运行项目并进入debug模式(相当于一条龙服务))
		5:将 Before launch:Start React Native Bundler,Activate tool window下的 Start React Native Bundler 项去掉
		6:点击Apply或OK完成配置
		7:npx react-native run-android 运行android平台
		8:在WebStorm选中刚刚的配置后，点击Debug按钮进入调试模式
		9:在虚拟机上调出菜单(Ctrl+M),选择debug。即可对代码进行调试


Hook：(https://zh-hans.reactjs.org/docs/hooks-intro.html)

	0、Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。
	Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。（我们
	不推荐把你已有的组件全部重写，但是你可以在新组件里开始使用 Hook。）

	1、Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性

	2、在我们继续之前，请记住 Hook 是：完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，
	你不必现在就去学习或使用 Hook。100% 向后兼容的。 Hook 不包含任何破坏性改动。现在可用。 Hook 已发布于 v16.8.0。

	4、useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 
	class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API

	5、https://zh-hans.reactjs.org/docs/hooks-state.html文档写得很棒


组件区别:
1、使用function构建的组件(多用來展示UI)内部是没有state私有数据的，只有一个props用来接收外部传递过来的数据；即【无状态组件】
	使用function构建的组件没有自己的生命周期函数(问题：函数组件是否有构造器,如何在函數組件使用構造器)

2、使用class创建的组件(多用來寫業務邏輯)内部出了有this.props这个只读属性外，还有一个专门存放自己私有数据的this.state属性，这个this.state是可读写的。即【有状态组件】
	使用class构建的组件有自己的生命周期函数


使用场景:
	1、当需要存放自己的私有数据，或者需要在组件的不同阶段执行不同的业务逻辑，适合用有状态组件。

	2、当只需要接收外部传过来的props，渲染固定的页面结构就完事，用无状态组件。性能会好一丢丢。

绑定this并传参(不适用于React？这是错误的，这里的笔记适用于es6，所以也包含react)：

import React from 'react'
...

 class Bin extends React.Compen..{
 	constructor(props) {
 		super(props)
 		this.state = {
 			mag:"我是默认参数",
 			uName:"",
 		}
 	}

 	render(){
 		<h1>xxx</h1>

 		// bind作用是为前面的函数修改了内部的this指向即指向bind的第一个参数，
 		//即当前对象。bind第一参数后面的所以参数都作为调用函数(changeMeg)的参数传入

 		//bind和call/apply的区别(call/apply改变了this的指向后会立即调用前面的函数，bind只会改变this指向)

 		//传参的第一种方式
 		<input ..but onClick={this.changeMeg.bind(this,'传参1','传参2')}/>

 		<h3>{this.state.mag}</h3>
 	}


 	changeMeg(arg1，arg2){
 	//如果这个函数没有被bind()绑定this,那这就是一个普通函数
 		console.log(this)//打印当前对象的值
 	}


 	/**
 	changeMeg = () => {
 	//箭头函数(本身起上下文的作用),因此在被调用时这里的this是即代表了当前函数所在的对象(在哪里调用即代表哪个对象)
 		console.log(this)
 		
 		this.setState({
 			mag:'我更新了mag状态的值'
 		})
 	}
 	*/

 	/**
 	changeMeg (){
 	//普通函数,因此在被调用时这里的this是undefined(this作用域不明确)
 		console.log(this)
 	}
 	*/


 }


在componentDidMount调用数据才会将数据挂载到页面中。componentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。

constructor被调用是在组件准备要挂载的最一开始，所以此时组件尚未挂载到网页上。

componentWillMount方法的调用在constructor之后，在render之前，在这方法里的代码调用setState方法不会触发重渲染，所以它一般不会用来作加载数据之用，它也很少被使用到。

一般的从后台(服务器)获取的数据，都会与组件上要用的数据加载有关，所以都在componentDidMount方法里面作。虽然与组件上的数据无关的加载，也可以在constructor里作，但constructor是作组件state初绐化工作，并不是设计来作加载数据这工作的，所以所有有副作用的代码都会集中在componentDidMount方法里。


箭头函数:
	1、箭头函数一个重要的好处就是对于this对象指向问题，在普通函数中this对象的指向是可变的，
		所以在普通函数中this对象可能会存在null的情况，但是箭头函数中this是固定的。

	2、箭头函数的this指向定义时所在对象的作用域而不是使用时的。

	3、使用箭头函数，因为在ES6中，箭头函数是自己的this值的，所以箭头函数内的this值继承自外围作用域(固定)，因此，在箭头函数中是可以直接使用this的

	在普通函数中，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。

在一个普通函数内调用一个匿名函数，调用时只需要写好被调用的函数名即可，无需用到this关键字:
	func cc(){
		<Button onPress={Go}>

		const Go = () => {
			...
		}
	}


提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。根据经验来看，如果 UI 中有一部分被多次使用（Button，Panel，Avatar），或者组件本身就足够复杂（App，FeedStory，Comment），那么它就是一个可复用组件的候选项。



redux:




-----------------------------------------------------

React Native

1. npm install --在项目中安装项目所需的node-modules
2. npm react-scripts --安装reactjs
3. npm start --启动项目

node.js 构建react官方开发、调试环境
1 cnpm install create-react-app -g #npm安装react构建工具到全局

2 create-react-app demo	#在命行的运行目录运行构建工具构建一个react项目开发环境

3 cd demo && npm start	#进入项目并用npm命令启动项目

4 localhost:3000	#chrome打开url运行

npm install #安装项目文件packages.json中的依赖到项目

djApp
#############
密钥库口令:intalenttech
姓氏:zeng
组织单位名称(OU):intalenttech.cn
组织名称:intal
城市或区域:shenzhen
省市区名:longhua
单位所在的双字母:ch
密钥口令:9527ksj
#############

DJ
#############
密钥库口令:intalenttech
姓氏:zeng
组织单位名称(OU):intalenttech.cn
组织名称:intal.com
城市或区域:shenzhen
省市区名:longhua
单位所在的双字母:ch
密钥口令:9527ksj
#############

已安装nvm；nvm install name;切换版本nvm use 12.11,卸载nvm uninstall name,
djapp使用node版本12.13
RNdemo使用8.9
----------------------------------------------
react-native:

npx react-native init ProjectName 创建项目(会自动下载好模板、脚手架等)

#####
npm是一个node package安装工具。
npx的作用是先检查本地有没有安装某个package，如果没有去远程registry找，找到的话直接使用，
不用下载到本地node-modules包里面，这样就能优化本地项目的大小，也可以避免安装package到全局。
#####

作者：AvenKe
链接：https://www.jianshu.com/p/50ce356e514a
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

cd 项目

npx react-native run-android 运行应用。也可以在 Android Studio 中直接运行应用

npm install xxx  --安装到node_model但不写入package.json；

npm install -g xxx  --利用npm安装全局模块xxx；

npm install xxx –save  --安装并写入package.json的”dependencies”中(即生产环境依赖的包)；

npm install xxx –save-dev  --安装并写入package.json的”devDependencies”中(开发环境需要的依赖)

npm install  --save name@1.0.0  --指定版本

---
npm uninstall xxx  --删除xxx模块；
npm uninstall -g xxx  ---删除全局模块xxx；


----------------------------------------------
run into error：

1、<号不能写在js 文件中，需要加“”


C:\Program Files\nodejs\       version 12.13


--------------------------------------------
react-navigation4.x

1、只要当前页面有导入rNavigation，就能通过this.props获取到navigation.xxx方法

2、navigate跳转到指定页后再跳转到同一个页面不会有反应

3、push跳转到页后再跳转到同一个页面，回进行压栈操作，即不断的进入当前的页面，返回时得一层一层返回。

4、goBack返回上一级，无需传参

5、popToTop回到首页 booker



phonegap：

	安装phonegap CLI
	图形界面安装后无法使用
	npm install -g phonegap
	npm install -g cordova


	1、phonegap create myApp(myDJ) 创建项目

	2、进入项目

	3、cordova platforms add Android 创建的Android/ios项目结构(如果在platforms下没有android的话)

	4、phonegap serve 启动项目(出来三个地址，最后一个为手机端地址)

	**提示：(手机端)可以在预览应用程序时使用手势。三指点击将返回主屏幕，四指点击将导致刷新。


	从以下受支持的应用程序市场之一中找到免费的PhoneGap Developer应用程序，并将其安装到您的移动设备上：

	Google Play
	Windows Phone商店
	〜iTunes〜目前不可用，但您仍然可以自己构建！(无效连接)


expo:
	一般情况下使用最新的node
	npm install expo-cli --global  #获取expo命令行

	1、expo init proName  #创建expo项目
	2、choose template
	3、npm install
	4、expo start


	可用真机扫描浏览器中的二维码查看构建的内容， 也可在页面上选择连接模式为LAN(局域网)，然后点击run android/ios虚拟器


	问题:
		1、如果需要用到expo没有的需要添加第三方react native组件（需要react-native link的组件），可以方便一行代码把expo项目eject成react native项目并集成expokit（不可逆），不影响之前使用expo内置组件的代码运行，同时可以继续使用expo提供的组件。
		实在需要react native的庞大三方组件，大不了就 
		$expo eject

		您说您正在使用Expo。它仍然是React Native，已经扩展了很多NativeModules，但是为了按其工作方式工作，它是“封闭的”，
		这意味着您不能添加任何其他第三方功能。为了扩展Expo，您必须“弹出(expo eject)”它，这意味着将项目提取到标准React Native应用中。
		*弹出:弹出的话就脱离了沙盒环境，等于于一个用cli创建的rn项目了（所以你得先配好环境），然后也不能再使用expo的app了


		2、如何分享我的Expo项目？是否可用提交到app stores？
			最快的分享Expo项目的方式是去发布它。您可以通过点击XDE中的Publish或者在项目中运行exp publish，它将会生成一个URL；您可以分享该URL给拥有Expo客户端的任何人，他们可以立即打开您的app。

		使用fetch发起post报错TypeError: Network request failed:
			可能ios/android需要配置网络权限
	
组件布局:
	FlexBox：（很常用,比如给View的内容设置排列方式时）
		flexDirection：'row', 设置主轴方向

		justifyContent:'center', 设置横轴的对齐方式

		alignItems:'baseline' 设置纵轴的对齐方式

		flexWrap:'warp' 当内容显示不下时自动换行

		flex:'1' 当前元素在父容器的空间占比,只有一个子元素在容器中且属性值为1，默认
		子元素占满整个父元素；当父容器中有多个子元素时，根据值的大小分配权重空间


	ScrollView：
		两个要点:
			a\ScrollView必须要有一个确定的高度才能正常工作
				1、不建议直接给SV置高度,可以给里面的内容设置高度。
				2、SV中不要加flex：1。
			b\ScrollView内部的其他响应者尚无法阻止ScrollView本身成为响应者

			contentContainerStyle 这是SV的样式

			horizontal:'true' 设置SV内容的排列方式
	
